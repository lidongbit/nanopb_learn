/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9.9 at Fri Nov  3 17:32:08 2023. */

#ifndef PB_VAR_MONITOR_DATA_PB_H_INCLUDED
#define PB_VAR_MONITOR_DATA_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Struct definitions */
typedef struct _VarMonitorData_Array {
    pb_callback_t data;
/* @@protoc_insertion_point(struct:VarMonitorData_Array) */
} VarMonitorData_Array;

typedef struct _VarMonitorData {
    int32_t len;
    int32_t arr_len;
    pb_callback_t item;
/* @@protoc_insertion_point(struct:VarMonitorData) */
} VarMonitorData;

/* Default values for struct fields */

/* Initializer values for message structs */
#define VarMonitorData_init_default              {0, 0, {{NULL}, NULL}}
#define VarMonitorData_Array_init_default        {{{NULL}, NULL}}
#define VarMonitorData_init_zero                 {0, 0, {{NULL}, NULL}}
#define VarMonitorData_Array_init_zero           {{{NULL}, NULL}}

/* Field tags (for use in manual encoding/decoding) */
#define VarMonitorData_Array_data_tag            1
#define VarMonitorData_len_tag                   1
#define VarMonitorData_arr_len_tag               2
#define VarMonitorData_item_tag                  3

/* Struct field encoding specification for nanopb */
extern const pb_field_t VarMonitorData_fields[4];
extern const pb_field_t VarMonitorData_Array_fields[2];

/* Maximum encoded size of messages (where known) */
/* VarMonitorData_size depends on runtime parameters */
/* VarMonitorData_Array_size depends on runtime parameters */

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define VAR_MONITOR_DATA_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
